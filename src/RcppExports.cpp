// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// matchOnPs
DataFrame matchOnPs(std::vector<double> propensityScores, std::vector<int> treatment, unsigned int maxRatio, double caliper);
RcppExport SEXP CohortMethod_matchOnPs(SEXP propensityScoresSEXP, SEXP treatmentSEXP, SEXP maxRatioSEXP, SEXP caliperSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type propensityScores(propensityScoresSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type treatment(treatmentSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxRatio(maxRatioSEXP);
    Rcpp::traits::input_parameter< double >::type caliper(caliperSEXP);
    __result = Rcpp::wrap(matchOnPs(propensityScores, treatment, maxRatio, caliper));
    return __result;
END_RCPP
}
// aucWithCi
std::vector<double> aucWithCi(std::vector<double> propensityScores, std::vector<int> treatment);
RcppExport SEXP CohortMethod_aucWithCi(SEXP propensityScoresSEXP, SEXP treatmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type propensityScores(propensityScoresSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type treatment(treatmentSEXP);
    __result = Rcpp::wrap(aucWithCi(propensityScores, treatment));
    return __result;
END_RCPP
}
// auc
double auc(std::vector<double> propensityScores, std::vector<int> treatment);
RcppExport SEXP CohortMethod_auc(SEXP propensityScoresSEXP, SEXP treatmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type propensityScores(propensityScoresSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type treatment(treatmentSEXP);
    __result = Rcpp::wrap(auc(propensityScores, treatment));
    return __result;
END_RCPP
}
// bySum
DataFrame bySum(List ffValues, List ffBins);
RcppExport SEXP CohortMethod_bySum(SEXP ffValuesSEXP, SEXP ffBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type ffValues(ffValuesSEXP);
    Rcpp::traits::input_parameter< List >::type ffBins(ffBinsSEXP);
    __result = Rcpp::wrap(bySum(ffValues, ffBins));
    return __result;
END_RCPP
}
// findOutcomePrevalence
double findOutcomePrevalence(std::vector<double> sBaseline, std::vector<double> sExp, std::vector<double> cBaseline, std::vector<double> cExp);
RcppExport SEXP CohortMethod_findOutcomePrevalence(SEXP sBaselineSEXP, SEXP sExpSEXP, SEXP cBaselineSEXP, SEXP cExpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type sBaseline(sBaselineSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sExp(sExpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cBaseline(cBaselineSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cExp(cExpSEXP);
    __result = Rcpp::wrap(findOutcomePrevalence(sBaseline, sExp, cBaseline, cExp));
    return __result;
END_RCPP
}
// generateEventTimesHelper
std::vector<int> generateEventTimesHelper(std::vector<double> value, std::vector<double> baseline);
RcppExport SEXP CohortMethod_generateEventTimesHelper(SEXP valueSEXP, SEXP baselineSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type baseline(baselineSEXP);
    __result = Rcpp::wrap(generateEventTimesHelper(value, baseline));
    return __result;
END_RCPP
}
