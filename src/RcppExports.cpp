// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// matchOnPs
DataFrame matchOnPs(std::vector<double> propensityScores, std::vector<int> treatment, unsigned int maxRatio, double caliper);
RcppExport SEXP _CohortMethod_matchOnPs(SEXP propensityScoresSEXP, SEXP treatmentSEXP, SEXP maxRatioSEXP, SEXP caliperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type propensityScores(propensityScoresSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type treatment(treatmentSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxRatio(maxRatioSEXP);
    Rcpp::traits::input_parameter< double >::type caliper(caliperSEXP);
    rcpp_result_gen = Rcpp::wrap(matchOnPs(propensityScores, treatment, maxRatio, caliper));
    return rcpp_result_gen;
END_RCPP
}
// aucWithCi
std::vector<double> aucWithCi(std::vector<double> propensityScores, std::vector<int> treatment);
RcppExport SEXP _CohortMethod_aucWithCi(SEXP propensityScoresSEXP, SEXP treatmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type propensityScores(propensityScoresSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type treatment(treatmentSEXP);
    rcpp_result_gen = Rcpp::wrap(aucWithCi(propensityScores, treatment));
    return rcpp_result_gen;
END_RCPP
}
// auc
double auc(std::vector<double> propensityScores, std::vector<int> treatment);
RcppExport SEXP _CohortMethod_auc(SEXP propensityScoresSEXP, SEXP treatmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type propensityScores(propensityScoresSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type treatment(treatmentSEXP);
    rcpp_result_gen = Rcpp::wrap(auc(propensityScores, treatment));
    return rcpp_result_gen;
END_RCPP
}
// bySum
DataFrame bySum(List ffValues, List ffBins);
RcppExport SEXP _CohortMethod_bySum(SEXP ffValuesSEXP, SEXP ffBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ffValues(ffValuesSEXP);
    Rcpp::traits::input_parameter< List >::type ffBins(ffBinsSEXP);
    rcpp_result_gen = Rcpp::wrap(bySum(ffValues, ffBins));
    return rcpp_result_gen;
END_RCPP
}
// findOutcomePrevalence
double findOutcomePrevalence(std::vector<double> sBaseline, std::vector<double> sExp, std::vector<double> cBaseline);
RcppExport SEXP _CohortMethod_findOutcomePrevalence(SEXP sBaselineSEXP, SEXP sExpSEXP, SEXP cBaselineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type sBaseline(sBaselineSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sExp(sExpSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cBaseline(cBaselineSEXP);
    rcpp_result_gen = Rcpp::wrap(findOutcomePrevalence(sBaseline, sExp, cBaseline));
    return rcpp_result_gen;
END_RCPP
}
// generateEventTimesHelper
std::vector<int> generateEventTimesHelper(std::vector<double> value, std::vector<double> baseline);
RcppExport SEXP _CohortMethod_generateEventTimesHelper(SEXP valueSEXP, SEXP baselineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type baseline(baselineSEXP);
    rcpp_result_gen = Rcpp::wrap(generateEventTimesHelper(value, baseline));
    return rcpp_result_gen;
END_RCPP
}
// generateEventTimesHelper1
std::vector<double> generateEventTimesHelper1(std::vector<double> value, std::vector<double> baseline, std::vector<double> times);
RcppExport SEXP _CohortMethod_generateEventTimesHelper1(SEXP valueSEXP, SEXP baselineSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type value(valueSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type baseline(baselineSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(generateEventTimesHelper1(value, baseline, times));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CohortMethod_matchOnPs", (DL_FUNC) &_CohortMethod_matchOnPs, 4},
    {"_CohortMethod_aucWithCi", (DL_FUNC) &_CohortMethod_aucWithCi, 2},
    {"_CohortMethod_auc", (DL_FUNC) &_CohortMethod_auc, 2},
    {"_CohortMethod_bySum", (DL_FUNC) &_CohortMethod_bySum, 2},
    {"_CohortMethod_findOutcomePrevalence", (DL_FUNC) &_CohortMethod_findOutcomePrevalence, 3},
    {"_CohortMethod_generateEventTimesHelper", (DL_FUNC) &_CohortMethod_generateEventTimesHelper, 2},
    {"_CohortMethod_generateEventTimesHelper1", (DL_FUNC) &_CohortMethod_generateEventTimesHelper1, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CohortMethod(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
